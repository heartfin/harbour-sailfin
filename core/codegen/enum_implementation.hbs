{{className}}Class::{{className}}Class() {}

} // NS DTO

namespace Support {

using {{className}} = Jellyfin::DTO::{{className}};

template <>

{{className}} fromJsonValue(const QJsonValue &source, convertType<{{className}}>) {
	if (!source.isString()) return {{className}}::EnumNotSet;

	QString str = source.toString();

	{{#each entries as |entry|}}
	if (str == QStringLiteral("{{entry.value}}")) {
		return {{className}}::{{entry.name}};
	}

	{{/each}}
	
	return {{className}}::EnumNotSet;
}

template <>
QJsonValue toJsonValue(const {{className}} &source, convertType<{{className}}>) {
	switch(source) {

	{{#each entries as |entry|}}
	case {{className}}::{{entry.name}}:
		return QStringLiteral("{{entry.value}}");

	{{/each}}

	case {{className}}::EnumNotSet: // Fallthrough
	default:
		return QJsonValue();
	}
}
